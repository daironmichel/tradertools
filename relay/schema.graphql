# source: http://localhost:5000/api/gql/
# timestamp: Fri Dec 06 2019 09:09:10 GMT-0500 (Eastern Standard Time)

"""An enumeration."""
enum AccountAccountMode {
  """CASH"""
  CASH

  """MARGIN"""
  MARGIN
}

"""An enumeration."""
enum AccountAccountStatus {
  """ACTIVE"""
  ACTIVE

  """CLOSED"""
  CLOSED
}

type AccountNode implements Node & DatabaseId {
  """The ID of the object."""
  id: ID!
  name: String!
  description: String!
  accountId: String!
  accountKey: String!
  accountType: String!
  institutionType: String!
  accountMode: AccountAccountMode!
  accountStatus: AccountAccountStatus!
  pdtStatus: String!
  cashBalance: Float!
  cashBuyingPower: Float!
  marginBuyingPower: Float!
  lastUpdated: DateTime!
  broker: BrokerNode!
  databaseId: Int!
}

type AccountNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AccountNodeEdge]!
}

"""A Relay edge containing a `AccountNode` and its cursor."""
type AccountNodeEdge {
  """The item at the end of the edge"""
  node: AccountNode

  """A cursor for use in pagination"""
  cursor: String!
}

enum AuthorizeConnectionError {
  PROVIDER_NOT_FOUND
  INCOMPATIBLE_STATE
}

input AuthorizeConnectionInput {
  providerId: ID!
  oauthVerifier: String!
  clientMutationId: String
}

type AuthorizeConnectionPayload {
  serviceProvider: ServiceProviderNode
  error: AuthorizeConnectionError
  errorMessage: String
  clientMutationId: String
}

type BrokerNode implements Node & DatabaseId {
  """The ID of the object."""
  id: ID!
  name: String!
  slug: String!
  accounts(before: String, after: String, first: Int, last: Int): AccountNodeConnection!
  serviceProviders(before: String, after: String, first: Int, last: Int): ServiceProviderConnection
  databaseId: Int!
  serviceProvider(databaseId: ID, slug: String): ServiceProviderNode
}

enum BuyStockError {
  INVALID
}

input BuyStockInput {
  providerId: ID!
  accountId: ID!
  strategyId: ID!
  symbol: String!
  clientMutationId: String
}

type BuyStockPayload {
  account: AccountNode
  error: BuyStockError
  errorMessage: String
  clientMutationId: String
}

enum CancelOrderError {
  INVALID
}

input CancelOrderInput {
  providerId: ID!
  accountId: ID!
  orderId: ID!
  clientMutationId: String
}

type CancelOrderPayload {
  account: AccountNode
  error: CancelOrderError
  errorMessage: String
  clientMutationId: String
}

enum ConnectProviderError {
  PROVIDER_NOT_FOUND
}

input ConnectProviderInput {
  providerId: ID!
  clientMutationId: String
}

type ConnectProviderPayload {
  serviceProvider: ServiceProviderNode
  authorizeUrl: String
  callbackEnabled: Boolean
  error: ConnectProviderError
  errorMessage: String
  clientMutationId: String
}

interface DatabaseId {
  databaseId: Int!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type Mutation {
  connectProvider(input: ConnectProviderInput!): ConnectProviderPayload!
  authorizeConnection(input: AuthorizeConnectionInput!): AuthorizeConnectionPayload!
  syncAccounts(input: SyncAccountsInput!): SyncAccountsPayload!
  buyStock(input: BuyStockInput!): BuyStockPayload!
  cancelOrder(input: CancelOrderInput!): CancelOrderPayload!
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type OrderType {
  orderId: ID
  symbol: String
  quantity: Int
  limitPrice: Float
  status: String
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type ProviderSessionNode implements Node & DatabaseId {
  """The ID of the object."""
  id: ID!
  status: SessionStatus
  requestToken: String
  requestTokenSecret: String
  accessToken: String
  accessTokenSecret: String
  databaseId: Int!
}

type Query {
  """The ID of the object"""
  node(id: ID!): Node
  viewer: ViewerType!
}

type QuoteType {
  volume: Int
  lastTrade: Float
  lastTradeDirection: Float
  marketCap: Float
  sharesOutstanding: Int
  primaryExchange: String
  companyName: String
}

type ServiceProviderConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ServiceProviderEdge!]!
}

type ServiceProviderEdge {
  cursor: String!
  node: ServiceProviderNode!
}

type ServiceProviderNode implements Node & DatabaseId {
  """The ID of the object."""
  id: ID!
  name: String!
  slug: String!
  protocol: ServiceProviderProtocol!
  consumerKey: String!
  consumerSecret: String!
  requestTokenUrl: String
  authorizeUrl: String
  accessTokenUrl: String
  refreshUrl: String
  revokeUrl: String
  baseUrl: String
  session: ProviderSessionNode
  broker: BrokerNode!
  databaseId: Int!
  quote(symbol: String): QuoteType
}

"""An enumeration."""
enum ServiceProviderProtocol {
  """OAuth 1.0a"""
  OAUTH1

  """OAuth 2"""
  OAUTH2
}

input ServiceProviderSlugInput {
  brokerSlug: String!
  priverderSlug: String!
}

enum SessionStatus {
  REQUESTING
  CONNECTED
  INACTIVE
  EXPIRED
  CLOSED
}

input SyncAccountsInput {
  providerId: ID!
  clientMutationId: String
}

type SyncAccountsPayload {
  boker: BrokerNode
  error: AuthorizeConnectionError
  errorMessage: String
  clientMutationId: String
}

type TradingStrategyNode implements Node & DatabaseId {
  """The ID of the object."""
  id: ID!
  name: String!
  exposurePercent: Int!
  profitPercent: Int!
  lossPercent: Int!
  feePerTrade: Float!
  priceMargin: Float!
  maxPriceMargin: Float!
  databaseId: Int!
}

type ViewerCredentialsType {
  databaseId: Int!
  fullName: String!
}

type ViewerType {
  credentials: ViewerCredentialsType!
  tradingStrategies: [TradingStrategyNode!]
  brokers: [BrokerNode!]!
  broker(databaseId: ID, slug: String): BrokerNode
  serviceProviders: [ServiceProviderNode!]!
  serviceProvider(databaseId: ID, slug: ServiceProviderSlugInput): ServiceProviderNode
  accounts: [AccountNode!]!
  orders(providerId: ID, accountId: ID): [OrderType!]!
}
